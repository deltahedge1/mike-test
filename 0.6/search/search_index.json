{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VBA Best Practices Description list of best practices and tips when developing VBA VBA Project Set-up Each VBA project should include 1. Config Module This module stores meta data of the vba project Inside Config Module Note we use CAPITALS for all values as they are constants What to include 'inside the config module Public Const VERSION = \"<version>\" Public Const NAME = \"<name>\" Public Const EMAIL = \"<email>\" Public Const DESCRIPTION = \"<example>\" Public Const REPO = \"<repo url>\" Public Const REPO ADO_FEATURE_NUMBER = \"<ADO_number>\" 'feel free to add other meta data you require Code 'inside the config module Public Const VERSION = \"0.1.0\" Public Const NAME = \"Ish Hassan\" Public Const EMAIL = \"ihassan@example.com\" Public Const DESCRIPTION = \"export and import VBA code for git versioning\" Public Const REPO = \"https://github.com/deltahedge1/vba-bestpracices\" Public Const Repo ADO_FEATURE_NUMBER = \"<ADO_number>\" 2. Main Module What is the Main module The main module is where you run the main logic of your solutions. This is best illustrated through an example. What should go in Main module Say you had a solution to import and transform some data from another workbook. The steps would be: 1. select sheet to get data from 2. run validations on data 3. raise exceptions if any 4. if no exceptions copy the data 5. transform the data (e.g. fill blanks) Each step above could be modularised into its own subroutines in another module like utils but would be combined in main as they all together create the solution. we modularise the code for two reasons. more maintainable and also easier to test the individual units of code Code Public Sub Main '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Get data from another sheet and transform it by replacing blanks ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' call get_data call validate_data call copy_data_to_sheet call transform_data End Sub Utils Module (optional) What must be done Inline documentation Versioning Testing and Testing documentation Use git to version control Change Log Best Practices Option Explicit Full declare variables Name variables appropriately Structure modular code (abstraction)","title":"homepage"},{"location":"#vba-best-practices","text":"","title":"VBA Best Practices"},{"location":"#description","text":"list of best practices and tips when developing VBA","title":"Description"},{"location":"#vba-project-set-up","text":"Each VBA project should include","title":"VBA Project Set-up"},{"location":"#1-config-module","text":"This module stores meta data of the vba project Inside Config Module Note we use CAPITALS for all values as they are constants What to include 'inside the config module Public Const VERSION = \"<version>\" Public Const NAME = \"<name>\" Public Const EMAIL = \"<email>\" Public Const DESCRIPTION = \"<example>\" Public Const REPO = \"<repo url>\" Public Const REPO ADO_FEATURE_NUMBER = \"<ADO_number>\" 'feel free to add other meta data you require Code 'inside the config module Public Const VERSION = \"0.1.0\" Public Const NAME = \"Ish Hassan\" Public Const EMAIL = \"ihassan@example.com\" Public Const DESCRIPTION = \"export and import VBA code for git versioning\" Public Const REPO = \"https://github.com/deltahedge1/vba-bestpracices\" Public Const Repo ADO_FEATURE_NUMBER = \"<ADO_number>\"","title":"1. Config Module"},{"location":"#2-main-module","text":"What is the Main module The main module is where you run the main logic of your solutions. This is best illustrated through an example. What should go in Main module Say you had a solution to import and transform some data from another workbook. The steps would be: 1. select sheet to get data from 2. run validations on data 3. raise exceptions if any 4. if no exceptions copy the data 5. transform the data (e.g. fill blanks) Each step above could be modularised into its own subroutines in another module like utils but would be combined in main as they all together create the solution. we modularise the code for two reasons. more maintainable and also easier to test the individual units of code Code Public Sub Main '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Get data from another sheet and transform it by replacing blanks ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' call get_data call validate_data call copy_data_to_sheet call transform_data End Sub","title":"2. Main Module"},{"location":"#utils-module-optional","text":"","title":"Utils Module (optional)"},{"location":"#what-must-be-done","text":"Inline documentation Versioning Testing and Testing documentation Use git to version control Change Log","title":"What must be done"},{"location":"#best-practices","text":"Option Explicit Full declare variables Name variables appropriately Structure modular code (abstraction)","title":"Best Practices"},{"location":"about1/","text":"About section 1","title":"About section 1"},{"location":"about1/#about-section-1","text":"","title":"About section 1"},{"location":"about2/","text":"About section 2","title":"About section 2"},{"location":"about2/#about-section-2","text":"","title":"About section 2"}]}