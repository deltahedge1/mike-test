{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VBA Best Practices Description list of best practices and tips when developing VBA VBA Project Set-up Each VBA project should include Config Module Main Module Utils Module (optional) 1. Config Module This module stores meta data of the vba project Inside Config Module Note we use CAPITALS for all values as they are constants What Config module looks like 'inside the config module Public Const VERSION = \"<version>\" Public Const NAME = \"<name>\" Public Const EMAIL = \"<email>\" Public Const DESCRIPTION = \"<example>\" Public Const REPO = \"<repo url>\" Public Const REPO ADO_FEATURE_NUMBER = \"<ADO_number>\" 'feel free to add other meta data you require Example Config Module 'inside the config module Public Const VERSION = \"0.1.0\" Public Const NAME = \"Ish Hassan\" Public Const EMAIL = \"ihassan@example.com\" Public Const DESCRIPTION = \"export and import VBA code for git versioning\" Public Const REPO = \"https://github.com/deltahedge1/vba-bestpracices\" Public Const Repo ADO_FEATURE_NUMBER = \"<ADO_number>\" 2. Main Module In the main module you should have a main subroutine which this logic for the whole solution. What is the Main module Understanding the main module is best illustrated through an example. Say you had a solution to import and transform some data from another workbook. The steps would be: select sheet to get data from run validations on data raise exceptions if any if no exceptions copy the data transform the data (e.g. fill blanks) Example Main Module Public Sub Main '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Get data from another sheet and transform it by replacing blanks ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'subroutines below would be in there own modules call utils.get_data call utils.validate_data call utils.copy_data_to_sheet call utils.transform_data End Sub Each step above could be modularised into its own subroutines in another module like utils but would be combined in main as they all together create the solution. Why do we modularise code into main and other modules We modularise the code for two reasons. More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it. 3. Utils Module (optional) This is the module where you can modularise subroutines and functions which will be used in main module Feel free to add more modules thatn just Utils if it helps manage your code better Understanding the Utils Module Typically you can put subroutines or functions that need to be used mutiple times. This could be like find the last row in a column or check it a column contains blanks. These can then we re-used mutiple time through out the project, and if there is a bug you only need to fix it in one place. Example Utils module 'inside utils module Sub copy_range_to_another_sheet(from_sheet as worksheet, to_sheet as worksheet) ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Copies data from one worksheet to another worksheet ' 'ARGS: ' from_sheet (worksheet obj): sheet to copy from ' to_sheet (worksheet obj): sheet to copy to ' 'EXAMPLE: ' call copy_range_to_another_sheet activeworkbook.sheets(\"sheet1\") _ ' activeworkbook.sheets(\"sheet2\") ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' from_sheet(\"Sheet1\").Range(\"A1:B10\").Copy Destination:=to_sheet(\"Sheet2\").Range(\"E1\") End Sub Why do we modularise code into Utils We modularise the code for two reasons, same reasons we did it for Main module above (are you suprised!) More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it. Moving your VBA code to Production reference Documentation for code Versioning Testing and Testing documentation Use git to version control Change Log README.md 1. Documentation for code There are two types of documentation required for code 1. Internal documentation This documentation lives inside the code and is meant to explain to developers what the code is intended for. It includes the following: description arguments and arugments types exceptions raised returns examples references Interanl Code Example example code Subroutine Sub example_sub debug.print(\"hello world\") End Sub === \"Function Function example_add(byval num1 as long, byval num2 as long) as long example_add = num1 + num2 End Function 2. External documentation This documentation lives outside the code and can go into much more depth than internal documentation. This documentation usually includes areas suchas : How to install Limitations Quick start guides Best Practices Option Explicit Full declare variables Name variables appropriately Structure modular code (abstraction)","title":"homepage"},{"location":"#vba-best-practices","text":"","title":"VBA Best Practices"},{"location":"#description","text":"list of best practices and tips when developing VBA","title":"Description"},{"location":"#vba-project-set-up","text":"Each VBA project should include Config Module Main Module Utils Module (optional)","title":"VBA Project Set-up"},{"location":"#1-config-module","text":"This module stores meta data of the vba project Inside Config Module Note we use CAPITALS for all values as they are constants What Config module looks like 'inside the config module Public Const VERSION = \"<version>\" Public Const NAME = \"<name>\" Public Const EMAIL = \"<email>\" Public Const DESCRIPTION = \"<example>\" Public Const REPO = \"<repo url>\" Public Const REPO ADO_FEATURE_NUMBER = \"<ADO_number>\" 'feel free to add other meta data you require Example Config Module 'inside the config module Public Const VERSION = \"0.1.0\" Public Const NAME = \"Ish Hassan\" Public Const EMAIL = \"ihassan@example.com\" Public Const DESCRIPTION = \"export and import VBA code for git versioning\" Public Const REPO = \"https://github.com/deltahedge1/vba-bestpracices\" Public Const Repo ADO_FEATURE_NUMBER = \"<ADO_number>\"","title":"1. Config Module"},{"location":"#2-main-module","text":"In the main module you should have a main subroutine which this logic for the whole solution. What is the Main module Understanding the main module is best illustrated through an example. Say you had a solution to import and transform some data from another workbook. The steps would be: select sheet to get data from run validations on data raise exceptions if any if no exceptions copy the data transform the data (e.g. fill blanks) Example Main Module Public Sub Main '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Get data from another sheet and transform it by replacing blanks ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'subroutines below would be in there own modules call utils.get_data call utils.validate_data call utils.copy_data_to_sheet call utils.transform_data End Sub Each step above could be modularised into its own subroutines in another module like utils but would be combined in main as they all together create the solution. Why do we modularise code into main and other modules We modularise the code for two reasons. More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it.","title":"2. Main Module"},{"location":"#3-utils-module-optional","text":"This is the module where you can modularise subroutines and functions which will be used in main module Feel free to add more modules thatn just Utils if it helps manage your code better Understanding the Utils Module Typically you can put subroutines or functions that need to be used mutiple times. This could be like find the last row in a column or check it a column contains blanks. These can then we re-used mutiple time through out the project, and if there is a bug you only need to fix it in one place. Example Utils module 'inside utils module Sub copy_range_to_another_sheet(from_sheet as worksheet, to_sheet as worksheet) ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Copies data from one worksheet to another worksheet ' 'ARGS: ' from_sheet (worksheet obj): sheet to copy from ' to_sheet (worksheet obj): sheet to copy to ' 'EXAMPLE: ' call copy_range_to_another_sheet activeworkbook.sheets(\"sheet1\") _ ' activeworkbook.sheets(\"sheet2\") ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' from_sheet(\"Sheet1\").Range(\"A1:B10\").Copy Destination:=to_sheet(\"Sheet2\").Range(\"E1\") End Sub Why do we modularise code into Utils We modularise the code for two reasons, same reasons we did it for Main module above (are you suprised!) More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it.","title":"3. Utils Module (optional)"},{"location":"#moving-your-vba-code-to-production","text":"reference Documentation for code Versioning Testing and Testing documentation Use git to version control Change Log README.md","title":"Moving your VBA code to Production"},{"location":"#1-documentation-for-code","text":"There are two types of documentation required for code 1. Internal documentation This documentation lives inside the code and is meant to explain to developers what the code is intended for. It includes the following: description arguments and arugments types exceptions raised returns examples references Interanl Code Example example code Subroutine Sub example_sub debug.print(\"hello world\") End Sub === \"Function Function example_add(byval num1 as long, byval num2 as long) as long example_add = num1 + num2 End Function 2. External documentation This documentation lives outside the code and can go into much more depth than internal documentation. This documentation usually includes areas suchas : How to install Limitations Quick start guides","title":"1. Documentation for code"},{"location":"#best-practices","text":"Option Explicit Full declare variables Name variables appropriately Structure modular code (abstraction)","title":"Best Practices"},{"location":"about1/","text":"About section 1","title":"About section 1"},{"location":"about1/#about-section-1","text":"","title":"About section 1"},{"location":"about2/","text":"About section 2","title":"About section 2"},{"location":"about2/#about-section-2","text":"","title":"About section 2"}]}